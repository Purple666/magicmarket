// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Expert.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Expert.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Interfaces {

namespace {

const ::google::protobuf::Descriptor* ExpertMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpertMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpertMessage_Estimation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpertMessage_Estimation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpertMessage_Information_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpertMessage_Information_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExpertMessage_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Expert_2eproto() {
  protobuf_AddDesc_Expert_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Expert.proto");
  GOOGLE_CHECK(file != NULL);
  ExpertMessage_descriptor_ = file->message_type(0);
  static const int ExpertMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, variablenames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, estimation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, information_),
  };
  ExpertMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExpertMessage_descriptor_,
      ExpertMessage::default_instance_,
      ExpertMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExpertMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage, _internal_metadata_),
      -1);
  ExpertMessage_Estimation_descriptor_ = ExpertMessage_descriptor_->nested_type(0);
  static const int ExpertMessage_Estimation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Estimation, mood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Estimation, certainty_),
  };
  ExpertMessage_Estimation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExpertMessage_Estimation_descriptor_,
      ExpertMessage_Estimation::default_instance_,
      ExpertMessage_Estimation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Estimation, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExpertMessage_Estimation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Estimation, _internal_metadata_),
      -1);
  ExpertMessage_Information_descriptor_ = ExpertMessage_descriptor_->nested_type(1);
  static const int ExpertMessage_Information_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Information, isexecutive_),
  };
  ExpertMessage_Information_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExpertMessage_Information_descriptor_,
      ExpertMessage_Information::default_instance_,
      ExpertMessage_Information_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Information, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExpertMessage_Information),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpertMessage_Information, _internal_metadata_),
      -1);
  ExpertMessage_Type_descriptor_ = ExpertMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Expert_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExpertMessage_descriptor_, &ExpertMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExpertMessage_Estimation_descriptor_, &ExpertMessage_Estimation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExpertMessage_Information_descriptor_, &ExpertMessage_Information::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Expert_2eproto() {
  delete ExpertMessage::default_instance_;
  delete ExpertMessage_reflection_;
  delete ExpertMessage_Estimation::default_instance_;
  delete ExpertMessage_Estimation_reflection_;
  delete ExpertMessage_Information::default_instance_;
  delete ExpertMessage_Information_reflection_;
}

void protobuf_AddDesc_Expert_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Expert.proto\022\nInterfaces\"\253\003\n\rExpertMes"
    "sage\022,\n\004type\030\001 \002(\0162\036.Interfaces.ExpertMe"
    "ssage.Type\022\014\n\004name\030\002 \001(\t\022\025\n\rvariableName"
    "s\030\003 \003(\t\022\021\n\tvariables\030\004 \003(\001\0228\n\nestimation"
    "\030\005 \001(\0132$.Interfaces.ExpertMessage.Estima"
    "tion\022:\n\013information\030\006 \001(\0132%.Interfaces.E"
    "xpertMessage.Information\032-\n\nEstimation\022\014"
    "\n\004mood\030\001 \002(\001\022\021\n\tcertainty\030\002 \002(\001\032\"\n\013Infor"
    "mation\022\023\n\013isExecutive\030\001 \002(\010\"k\n\004Type\022\013\n\007g"
    "etName\020\000\022\021\n\rgetPrediction\020\001\022\030\n\024getRequir"
    "edVariables\020\002\022\014\n\010shutdown\020\003\022\t\n\005reset\020\004\022\020"
    "\n\014informations\020\005", 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Expert.proto", &protobuf_RegisterTypes);
  ExpertMessage::default_instance_ = new ExpertMessage();
  ExpertMessage_Estimation::default_instance_ = new ExpertMessage_Estimation();
  ExpertMessage_Information::default_instance_ = new ExpertMessage_Information();
  ExpertMessage::default_instance_->InitAsDefaultInstance();
  ExpertMessage_Estimation::default_instance_->InitAsDefaultInstance();
  ExpertMessage_Information::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Expert_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Expert_2eproto {
  StaticDescriptorInitializer_Expert_2eproto() {
    protobuf_AddDesc_Expert_2eproto();
  }
} static_descriptor_initializer_Expert_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExpertMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpertMessage_Type_descriptor_;
}
bool ExpertMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExpertMessage_Type ExpertMessage::getName;
const ExpertMessage_Type ExpertMessage::getPrediction;
const ExpertMessage_Type ExpertMessage::getRequiredVariables;
const ExpertMessage_Type ExpertMessage::shutdown;
const ExpertMessage_Type ExpertMessage::reset;
const ExpertMessage_Type ExpertMessage::informations;
const ExpertMessage_Type ExpertMessage::Type_MIN;
const ExpertMessage_Type ExpertMessage::Type_MAX;
const int ExpertMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExpertMessage_Estimation::kMoodFieldNumber;
const int ExpertMessage_Estimation::kCertaintyFieldNumber;
#endif  // !_MSC_VER

ExpertMessage_Estimation::ExpertMessage_Estimation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Interfaces.ExpertMessage.Estimation)
}

void ExpertMessage_Estimation::InitAsDefaultInstance() {
}

ExpertMessage_Estimation::ExpertMessage_Estimation(const ExpertMessage_Estimation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Interfaces.ExpertMessage.Estimation)
}

void ExpertMessage_Estimation::SharedCtor() {
  _cached_size_ = 0;
  mood_ = 0;
  certainty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpertMessage_Estimation::~ExpertMessage_Estimation() {
  // @@protoc_insertion_point(destructor:Interfaces.ExpertMessage.Estimation)
  SharedDtor();
}

void ExpertMessage_Estimation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpertMessage_Estimation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpertMessage_Estimation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpertMessage_Estimation_descriptor_;
}

const ExpertMessage_Estimation& ExpertMessage_Estimation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expert_2eproto();
  return *default_instance_;
}

ExpertMessage_Estimation* ExpertMessage_Estimation::default_instance_ = NULL;

ExpertMessage_Estimation* ExpertMessage_Estimation::New(::google::protobuf::Arena* arena) const {
  ExpertMessage_Estimation* n = new ExpertMessage_Estimation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpertMessage_Estimation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExpertMessage_Estimation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mood_, certainty_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExpertMessage_Estimation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Interfaces.ExpertMessage.Estimation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mood = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mood_)));
          set_has_mood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_certainty;
        break;
      }

      // required double certainty = 2;
      case 2: {
        if (tag == 17) {
         parse_certainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &certainty_)));
          set_has_certainty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Interfaces.ExpertMessage.Estimation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Interfaces.ExpertMessage.Estimation)
  return false;
#undef DO_
}

void ExpertMessage_Estimation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Interfaces.ExpertMessage.Estimation)
  // required double mood = 1;
  if (has_mood()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mood(), output);
  }

  // required double certainty = 2;
  if (has_certainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->certainty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Interfaces.ExpertMessage.Estimation)
}

::google::protobuf::uint8* ExpertMessage_Estimation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interfaces.ExpertMessage.Estimation)
  // required double mood = 1;
  if (has_mood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mood(), target);
  }

  // required double certainty = 2;
  if (has_certainty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->certainty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interfaces.ExpertMessage.Estimation)
  return target;
}

int ExpertMessage_Estimation::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_mood()) {
    // required double mood = 1;
    total_size += 1 + 8;
  }

  if (has_certainty()) {
    // required double certainty = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int ExpertMessage_Estimation::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double mood = 1;
    total_size += 1 + 8;

    // required double certainty = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpertMessage_Estimation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExpertMessage_Estimation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpertMessage_Estimation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpertMessage_Estimation::MergeFrom(const ExpertMessage_Estimation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mood()) {
      set_mood(from.mood());
    }
    if (from.has_certainty()) {
      set_certainty(from.certainty());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExpertMessage_Estimation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpertMessage_Estimation::CopyFrom(const ExpertMessage_Estimation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpertMessage_Estimation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExpertMessage_Estimation::Swap(ExpertMessage_Estimation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpertMessage_Estimation::InternalSwap(ExpertMessage_Estimation* other) {
  std::swap(mood_, other->mood_);
  std::swap(certainty_, other->certainty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpertMessage_Estimation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpertMessage_Estimation_descriptor_;
  metadata.reflection = ExpertMessage_Estimation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExpertMessage_Information::kIsExecutiveFieldNumber;
#endif  // !_MSC_VER

ExpertMessage_Information::ExpertMessage_Information()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Interfaces.ExpertMessage.Information)
}

void ExpertMessage_Information::InitAsDefaultInstance() {
}

ExpertMessage_Information::ExpertMessage_Information(const ExpertMessage_Information& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Interfaces.ExpertMessage.Information)
}

void ExpertMessage_Information::SharedCtor() {
  _cached_size_ = 0;
  isexecutive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpertMessage_Information::~ExpertMessage_Information() {
  // @@protoc_insertion_point(destructor:Interfaces.ExpertMessage.Information)
  SharedDtor();
}

void ExpertMessage_Information::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpertMessage_Information::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpertMessage_Information::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpertMessage_Information_descriptor_;
}

const ExpertMessage_Information& ExpertMessage_Information::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expert_2eproto();
  return *default_instance_;
}

ExpertMessage_Information* ExpertMessage_Information::default_instance_ = NULL;

ExpertMessage_Information* ExpertMessage_Information::New(::google::protobuf::Arena* arena) const {
  ExpertMessage_Information* n = new ExpertMessage_Information;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpertMessage_Information::Clear() {
  isexecutive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExpertMessage_Information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Interfaces.ExpertMessage.Information)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isExecutive = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isexecutive_)));
          set_has_isexecutive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Interfaces.ExpertMessage.Information)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Interfaces.ExpertMessage.Information)
  return false;
#undef DO_
}

void ExpertMessage_Information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Interfaces.ExpertMessage.Information)
  // required bool isExecutive = 1;
  if (has_isexecutive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isexecutive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Interfaces.ExpertMessage.Information)
}

::google::protobuf::uint8* ExpertMessage_Information::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interfaces.ExpertMessage.Information)
  // required bool isExecutive = 1;
  if (has_isexecutive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isexecutive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interfaces.ExpertMessage.Information)
  return target;
}

int ExpertMessage_Information::ByteSize() const {
  int total_size = 0;

  // required bool isExecutive = 1;
  if (has_isexecutive()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpertMessage_Information::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExpertMessage_Information* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpertMessage_Information>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpertMessage_Information::MergeFrom(const ExpertMessage_Information& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isexecutive()) {
      set_isexecutive(from.isexecutive());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExpertMessage_Information::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpertMessage_Information::CopyFrom(const ExpertMessage_Information& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpertMessage_Information::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExpertMessage_Information::Swap(ExpertMessage_Information* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpertMessage_Information::InternalSwap(ExpertMessage_Information* other) {
  std::swap(isexecutive_, other->isexecutive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpertMessage_Information::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpertMessage_Information_descriptor_;
  metadata.reflection = ExpertMessage_Information_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExpertMessage::kTypeFieldNumber;
const int ExpertMessage::kNameFieldNumber;
const int ExpertMessage::kVariableNamesFieldNumber;
const int ExpertMessage::kVariablesFieldNumber;
const int ExpertMessage::kEstimationFieldNumber;
const int ExpertMessage::kInformationFieldNumber;
#endif  // !_MSC_VER

ExpertMessage::ExpertMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Interfaces.ExpertMessage)
}

void ExpertMessage::InitAsDefaultInstance() {
  estimation_ = const_cast< ::Interfaces::ExpertMessage_Estimation*>(&::Interfaces::ExpertMessage_Estimation::default_instance());
  information_ = const_cast< ::Interfaces::ExpertMessage_Information*>(&::Interfaces::ExpertMessage_Information::default_instance());
}

ExpertMessage::ExpertMessage(const ExpertMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Interfaces.ExpertMessage)
}

void ExpertMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  estimation_ = NULL;
  information_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpertMessage::~ExpertMessage() {
  // @@protoc_insertion_point(destructor:Interfaces.ExpertMessage)
  SharedDtor();
}

void ExpertMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete estimation_;
    delete information_;
  }
}

void ExpertMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpertMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpertMessage_descriptor_;
}

const ExpertMessage& ExpertMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Expert_2eproto();
  return *default_instance_;
}

ExpertMessage* ExpertMessage::default_instance_ = NULL;

ExpertMessage* ExpertMessage::New(::google::protobuf::Arena* arena) const {
  ExpertMessage* n = new ExpertMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpertMessage::Clear() {
  if (_has_bits_[0 / 32] & 51u) {
    type_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_estimation()) {
      if (estimation_ != NULL) estimation_->::Interfaces::ExpertMessage_Estimation::Clear();
    }
    if (has_information()) {
      if (information_ != NULL) information_->::Interfaces::ExpertMessage_Information::Clear();
    }
  }
  variablenames_.Clear();
  variables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExpertMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Interfaces.ExpertMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Interfaces.ExpertMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Interfaces::ExpertMessage_Type_IsValid(value)) {
            set_type(static_cast< ::Interfaces::ExpertMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Interfaces.ExpertMessage.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variableNames;
        break;
      }

      // repeated string variableNames = 3;
      case 3: {
        if (tag == 26) {
         parse_variableNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variablenames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variablenames(this->variablenames_size() - 1).data(),
            this->variablenames(this->variablenames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Interfaces.ExpertMessage.variableNames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variableNames;
        if (input->ExpectTag(33)) goto parse_variables;
        break;
      }

      // repeated double variables = 4;
      case 4: {
        if (tag == 33) {
         parse_variables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_variables())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_variables())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_variables;
        if (input->ExpectTag(42)) goto parse_estimation;
        break;
      }

      // optional .Interfaces.ExpertMessage.Estimation estimation = 5;
      case 5: {
        if (tag == 42) {
         parse_estimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estimation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_information;
        break;
      }

      // optional .Interfaces.ExpertMessage.Information information = 6;
      case 6: {
        if (tag == 50) {
         parse_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_information()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Interfaces.ExpertMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Interfaces.ExpertMessage)
  return false;
#undef DO_
}

void ExpertMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Interfaces.ExpertMessage)
  // required .Interfaces.ExpertMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Interfaces.ExpertMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string variableNames = 3;
  for (int i = 0; i < this->variablenames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variablenames(i).data(), this->variablenames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Interfaces.ExpertMessage.variableNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->variablenames(i), output);
  }

  // repeated double variables = 4;
  for (int i = 0; i < this->variables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->variables(i), output);
  }

  // optional .Interfaces.ExpertMessage.Estimation estimation = 5;
  if (has_estimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->estimation_, output);
  }

  // optional .Interfaces.ExpertMessage.Information information = 6;
  if (has_information()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->information_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Interfaces.ExpertMessage)
}

::google::protobuf::uint8* ExpertMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Interfaces.ExpertMessage)
  // required .Interfaces.ExpertMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Interfaces.ExpertMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string variableNames = 3;
  for (int i = 0; i < this->variablenames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variablenames(i).data(), this->variablenames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Interfaces.ExpertMessage.variableNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->variablenames(i), target);
  }

  // repeated double variables = 4;
  for (int i = 0; i < this->variables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->variables(i), target);
  }

  // optional .Interfaces.ExpertMessage.Estimation estimation = 5;
  if (has_estimation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->estimation_, target);
  }

  // optional .Interfaces.ExpertMessage.Information information = 6;
  if (has_information()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->information_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Interfaces.ExpertMessage)
  return target;
}

int ExpertMessage::ByteSize() const {
  int total_size = 0;

  // required .Interfaces.ExpertMessage.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 50u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Interfaces.ExpertMessage.Estimation estimation = 5;
    if (has_estimation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->estimation_);
    }

    // optional .Interfaces.ExpertMessage.Information information = 6;
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->information_);
    }

  }
  // repeated string variableNames = 3;
  total_size += 1 * this->variablenames_size();
  for (int i = 0; i < this->variablenames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variablenames(i));
  }

  // repeated double variables = 4;
  {
    int data_size = 0;
    data_size = 8 * this->variables_size();
    total_size += 1 * this->variables_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpertMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExpertMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpertMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpertMessage::MergeFrom(const ExpertMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  variablenames_.MergeFrom(from.variablenames_);
  variables_.MergeFrom(from.variables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_estimation()) {
      mutable_estimation()->::Interfaces::ExpertMessage_Estimation::MergeFrom(from.estimation());
    }
    if (from.has_information()) {
      mutable_information()->::Interfaces::ExpertMessage_Information::MergeFrom(from.information());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExpertMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpertMessage::CopyFrom(const ExpertMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpertMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_estimation()) {
    if (!this->estimation_->IsInitialized()) return false;
  }
  if (has_information()) {
    if (!this->information_->IsInitialized()) return false;
  }
  return true;
}

void ExpertMessage::Swap(ExpertMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpertMessage::InternalSwap(ExpertMessage* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  variablenames_.UnsafeArenaSwap(&other->variablenames_);
  variables_.UnsafeArenaSwap(&other->variables_);
  std::swap(estimation_, other->estimation_);
  std::swap(information_, other->information_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpertMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpertMessage_descriptor_;
  metadata.reflection = ExpertMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpertMessage_Estimation

// required double mood = 1;
bool ExpertMessage_Estimation::has_mood() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpertMessage_Estimation::set_has_mood() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpertMessage_Estimation::clear_has_mood() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpertMessage_Estimation::clear_mood() {
  mood_ = 0;
  clear_has_mood();
}
 double ExpertMessage_Estimation::mood() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.Estimation.mood)
  return mood_;
}
 void ExpertMessage_Estimation::set_mood(double value) {
  set_has_mood();
  mood_ = value;
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.Estimation.mood)
}

// required double certainty = 2;
bool ExpertMessage_Estimation::has_certainty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpertMessage_Estimation::set_has_certainty() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpertMessage_Estimation::clear_has_certainty() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpertMessage_Estimation::clear_certainty() {
  certainty_ = 0;
  clear_has_certainty();
}
 double ExpertMessage_Estimation::certainty() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.Estimation.certainty)
  return certainty_;
}
 void ExpertMessage_Estimation::set_certainty(double value) {
  set_has_certainty();
  certainty_ = value;
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.Estimation.certainty)
}

// -------------------------------------------------------------------

// ExpertMessage_Information

// required bool isExecutive = 1;
bool ExpertMessage_Information::has_isexecutive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpertMessage_Information::set_has_isexecutive() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpertMessage_Information::clear_has_isexecutive() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpertMessage_Information::clear_isexecutive() {
  isexecutive_ = false;
  clear_has_isexecutive();
}
 bool ExpertMessage_Information::isexecutive() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.Information.isExecutive)
  return isexecutive_;
}
 void ExpertMessage_Information::set_isexecutive(bool value) {
  set_has_isexecutive();
  isexecutive_ = value;
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.Information.isExecutive)
}

// -------------------------------------------------------------------

// ExpertMessage

// required .Interfaces.ExpertMessage.Type type = 1;
bool ExpertMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpertMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpertMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpertMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::Interfaces::ExpertMessage_Type ExpertMessage::type() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.type)
  return static_cast< ::Interfaces::ExpertMessage_Type >(type_);
}
 void ExpertMessage::set_type(::Interfaces::ExpertMessage_Type value) {
  assert(::Interfaces::ExpertMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.type)
}

// optional string name = 2;
bool ExpertMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpertMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpertMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpertMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ExpertMessage::name() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExpertMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.name)
}
 void ExpertMessage::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Interfaces.ExpertMessage.name)
}
 void ExpertMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Interfaces.ExpertMessage.name)
}
 ::std::string* ExpertMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Interfaces.ExpertMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExpertMessage::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExpertMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Interfaces.ExpertMessage.name)
}

// repeated string variableNames = 3;
int ExpertMessage::variablenames_size() const {
  return variablenames_.size();
}
void ExpertMessage::clear_variablenames() {
  variablenames_.Clear();
}
 const ::std::string& ExpertMessage::variablenames(int index) const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.variableNames)
  return variablenames_.Get(index);
}
 ::std::string* ExpertMessage::mutable_variablenames(int index) {
  // @@protoc_insertion_point(field_mutable:Interfaces.ExpertMessage.variableNames)
  return variablenames_.Mutable(index);
}
 void ExpertMessage::set_variablenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.variableNames)
  variablenames_.Mutable(index)->assign(value);
}
 void ExpertMessage::set_variablenames(int index, const char* value) {
  variablenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Interfaces.ExpertMessage.variableNames)
}
 void ExpertMessage::set_variablenames(int index, const char* value, size_t size) {
  variablenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Interfaces.ExpertMessage.variableNames)
}
 ::std::string* ExpertMessage::add_variablenames() {
  return variablenames_.Add();
}
 void ExpertMessage::add_variablenames(const ::std::string& value) {
  variablenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Interfaces.ExpertMessage.variableNames)
}
 void ExpertMessage::add_variablenames(const char* value) {
  variablenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Interfaces.ExpertMessage.variableNames)
}
 void ExpertMessage::add_variablenames(const char* value, size_t size) {
  variablenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Interfaces.ExpertMessage.variableNames)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpertMessage::variablenames() const {
  // @@protoc_insertion_point(field_list:Interfaces.ExpertMessage.variableNames)
  return variablenames_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ExpertMessage::mutable_variablenames() {
  // @@protoc_insertion_point(field_mutable_list:Interfaces.ExpertMessage.variableNames)
  return &variablenames_;
}

// repeated double variables = 4;
int ExpertMessage::variables_size() const {
  return variables_.size();
}
void ExpertMessage::clear_variables() {
  variables_.Clear();
}
 double ExpertMessage::variables(int index) const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.variables)
  return variables_.Get(index);
}
 void ExpertMessage::set_variables(int index, double value) {
  variables_.Set(index, value);
  // @@protoc_insertion_point(field_set:Interfaces.ExpertMessage.variables)
}
 void ExpertMessage::add_variables(double value) {
  variables_.Add(value);
  // @@protoc_insertion_point(field_add:Interfaces.ExpertMessage.variables)
}
 const ::google::protobuf::RepeatedField< double >&
ExpertMessage::variables() const {
  // @@protoc_insertion_point(field_list:Interfaces.ExpertMessage.variables)
  return variables_;
}
 ::google::protobuf::RepeatedField< double >*
ExpertMessage::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Interfaces.ExpertMessage.variables)
  return &variables_;
}

// optional .Interfaces.ExpertMessage.Estimation estimation = 5;
bool ExpertMessage::has_estimation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExpertMessage::set_has_estimation() {
  _has_bits_[0] |= 0x00000010u;
}
void ExpertMessage::clear_has_estimation() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExpertMessage::clear_estimation() {
  if (estimation_ != NULL) estimation_->::Interfaces::ExpertMessage_Estimation::Clear();
  clear_has_estimation();
}
const ::Interfaces::ExpertMessage_Estimation& ExpertMessage::estimation() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.estimation)
  return estimation_ != NULL ? *estimation_ : *default_instance_->estimation_;
}
::Interfaces::ExpertMessage_Estimation* ExpertMessage::mutable_estimation() {
  set_has_estimation();
  if (estimation_ == NULL) {
    estimation_ = new ::Interfaces::ExpertMessage_Estimation;
  }
  // @@protoc_insertion_point(field_mutable:Interfaces.ExpertMessage.estimation)
  return estimation_;
}
::Interfaces::ExpertMessage_Estimation* ExpertMessage::release_estimation() {
  clear_has_estimation();
  ::Interfaces::ExpertMessage_Estimation* temp = estimation_;
  estimation_ = NULL;
  return temp;
}
void ExpertMessage::set_allocated_estimation(::Interfaces::ExpertMessage_Estimation* estimation) {
  delete estimation_;
  estimation_ = estimation;
  if (estimation) {
    set_has_estimation();
  } else {
    clear_has_estimation();
  }
  // @@protoc_insertion_point(field_set_allocated:Interfaces.ExpertMessage.estimation)
}

// optional .Interfaces.ExpertMessage.Information information = 6;
bool ExpertMessage::has_information() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExpertMessage::set_has_information() {
  _has_bits_[0] |= 0x00000020u;
}
void ExpertMessage::clear_has_information() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExpertMessage::clear_information() {
  if (information_ != NULL) information_->::Interfaces::ExpertMessage_Information::Clear();
  clear_has_information();
}
const ::Interfaces::ExpertMessage_Information& ExpertMessage::information() const {
  // @@protoc_insertion_point(field_get:Interfaces.ExpertMessage.information)
  return information_ != NULL ? *information_ : *default_instance_->information_;
}
::Interfaces::ExpertMessage_Information* ExpertMessage::mutable_information() {
  set_has_information();
  if (information_ == NULL) {
    information_ = new ::Interfaces::ExpertMessage_Information;
  }
  // @@protoc_insertion_point(field_mutable:Interfaces.ExpertMessage.information)
  return information_;
}
::Interfaces::ExpertMessage_Information* ExpertMessage::release_information() {
  clear_has_information();
  ::Interfaces::ExpertMessage_Information* temp = information_;
  information_ = NULL;
  return temp;
}
void ExpertMessage::set_allocated_information(::Interfaces::ExpertMessage_Information* information) {
  delete information_;
  information_ = information;
  if (information) {
    set_has_information();
  } else {
    clear_has_information();
  }
  // @@protoc_insertion_point(field_set_allocated:Interfaces.ExpertMessage.information)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Interfaces

// @@protoc_insertion_point(global_scope)
